name: Deploy HAPI FHIR Server, Load IG and Test Data

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy_and_load:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      - name: Load Configuration
        id: load-config
        run: |
          # Read the config.properties file and create an environment file
          echo "Loading configuration from config.properties"
          while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done < config.properties

      - name: Debug Environment Variables
        run: |
          echo "IG_PACKAGE_ID: ${{ env.IG_PACKAGE_ID }}"
          echo "IG_PACKAGE_VERSION: ${{ env.IG_PACKAGE_VERSION }}"
          echo "HAPI_SERVER: ${{ env.HAPI_SERVER }}"
          echo "TERMINOLOGY_SERVER: ${{ env.TERMINOLOGY_SERVER }}"
          echo "TESTKIT_REPO: ${{ env.TESTKIT_REP }}"

      - name: Start HAPI FHIR Server
        run: |
          docker pull hapiproject/hapi:latest
          docker run -d --name HAPI_SERV -p 8080:8080 hapiproject/hapi:latest
          echo "Waiting for HAPI FHIR server to be ready..."
          docker ps

      - name: Wait for HAPI FHIR Server to start
        run: |
          until curl --silent --fail HAPI_SERV:8080/fhir/metadata; do
            echo "Waiting..."
            sleep 10
          done
          echo "HAPI FHIR Server is running."

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x' # Specify the .NET version you need

      - name: Install UploadFIG
        run: |
          dotnet tool install --global UploadFIG

      - name: Upload IG using UploadFIG
        run: |
          UploadFIG -pid ${{ env.IG_PACKAGE_ID }} -pv ${{ env.IG_PACKAGE_VERSION }} -d ${{ env.HAPI_SERVER }} --includeReferencedDependencies -reg ${{ env.TERMINOLOGY_SERVER }}

      - name: Clone Test Data
        run: |
          git clone https://github.com/${{ env.TEST_DATA_REPO }}.git test_data

      - name: Load Test Data
        run: |
          set -x  # Enable shell debugging

          # Install GitHub CLI, unzip, and jq
          sudo apt-get update
          sudo apt-get install -y gh unzip jq

          # Get the latest release from au-fhir-test-data-utils
          LATEST_RELEASE=$(gh api /repos/hl7au/au-fhir-test-data-utils/releases | jq -r '.[0].tag_name')

          # Debug: Print the release tag
          echo "Latest Release Tag: $LATEST_RELEASE"

          # Debug: Print the entire release JSON
          echo "Full Release JSON:"
          gh api /repos/hl7au/au-fhir-test-data-utils/releases/tags/$LATEST_RELEASE

          # Debug: Print the assets array JSON
          echo "Assets Array JSON:"
          gh api /repos/hl7au/au-fhir-test-data-utils/releases/tags/$LATEST_RELEASE | jq '.assets'

          # Find the Linux zip asset URL (CORRECTED filter - ADJUST THIS!)
          ASSET_URL=$(gh api /repos/hl7au/au-fhir-test-data-utils/releases/tags/$LATEST_RELEASE | jq -r '.assets[] | select(.name == "TestDataClient-linux-x64.zip") | .browser_download_url')

          # Debug: Print the Asset URL
          echo "Asset URL: $ASSET_URL"

          # Check if an asset URL was found
          if [ -z "$ASSET_URL" ]; then
            echo "Error: No Linux zip found in the latest release ($LATEST_RELEASE)"
            exit 1
          fi

          # Download the zip
          wget "$ASSET_URL" -O TestDataClient.zip  # Quoted

          # Create a directory for extraction
          mkdir TestDataClientDir

          # Extract the zip
          unzip TestDataClient.zip -d TestDataClientDir

          # Make the executable inside the zip executable (assuming it's in the 'TestDataClient-linux-x64-binaries' subdirectory)
          chmod +x TestDataClientDir/TestDataClient-linux-x64-binaries/TestDataClient

          # Construct absolute directory path
          #DATA_DIR="$GITHUB_WORKSPACE/test_data/au-fhir-test-data-set/"

          # Debug: Print the command
          echo "Executing: ./TestDataClientDir/TestDataClient-linux-x64-binaries/TestDataClient --server http://localhost:8080/fhir --directory $DATA_DIR"

          # Define the resource types
          items=("Patient" "HealthcareService" "Organization" "Location" "Practitioner" "PractitionerRole" "RelatedPerson" "Encounter" "AllergyIntolerance" "Condition" "Immunization" "Procedure" "Observation" "Medication" "MedicationRequest" "MedicationStatement" "Coverage" "Specimen" "CommunicationRequest" "Consent" "ServiceRequest" "Task")

          # Loop through each resource type and call TestDataClient
          for item in "${items[@]}"; do
            echo "Loading data for: $item"
            "./TestDataClientDir/TestDataClient-linux-x64-binaries/TestDataClient" "$item" "$GITHUB_WORKSPACE/test_data/au-fhir-test-data-set/" "http://localhost:8080/fhir" "basic" "default"
          done

        env:
          GH_TOKEN: ${{ github.token }}

     # NEW: Clone Inferno TestKit
      - name: Clone Inferno TestKit
        run: |
          git clone ${{ env.TESTKIT_REPO }} inferno;
          cd inferno;
          pwd

      # NEW: Set up Inferno Database
      - name: Set up Inferno Database
        run: |
          cd inferno
          docker compose run inferno bundle exec rake db:migrate
          echo "Placeholder: Database setup command"
          ls -la

      #- name: Verify Test Data Loaded (Example, adjust as needed)
      #  run: |
      #    curl http://HAPI_SERV:8080/fhir/Patient

      # NEW\: Execute Inferno Tests
      - name: Execute Inferno Tests
        run: |
          cd inferno
          docker compose run inferno bundle exec inferno execute --suite au_core_v110_preview --inputs "url:HAPI_SERV:8080/fhir" patient_ids:baratz-toni,irvine-ronny-lawrence,italia-sofia,howe-deangelo,hayes-arianne,baby-banks-john,banks-mia-leanne location_ids:bobrester-medical-center,au-hospital organization_ids:dva-au,organization-medical-center-tc practitioner_ids:alderson-helene practitioner_role_ids:cardiologist-sallie-sutherland,bobrester-bob-gp --outputter json > inferno_results.json

      
